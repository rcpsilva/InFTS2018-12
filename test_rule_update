from FTS import FTS
import rule_base_management as rbm
import partition_utilities as pu
import pertinence_funcs as pf
from pertinence_funcs import fuzzify_x_list_t
import numpy as np
import matplotlib.pyplot as plt
from forecast_funcs import forecast_weighted_average_t_sets

old_partitions = pu.generate_t_partitions(3, 0, 8)
old_centers = [p[1] for p in old_partitions]

up_partitions = pu.generate_t_partitions(3, 1, 4)
up_centers = [p[1] for p in up_partitions]

f = fuzzify_x_list_t(old_centers, up_partitions)

# final partitions
# new_centers = [old_centers[i] for i in range(len(f)) if f[i] < 0] + up_centers
# new_centers.sort()
# new_partitions = pu.generate_t_partitions_from_centers(new_centers)
new_partitions = up_partitions + [old_partitions[i] for i in range(len(f)) if f[i] < 0]
new_partitions = sorted(new_partitions, key=lambda x: x[1])

# maps
f0 = fuzzify_x_list_t(old_centers, up_partitions)

f = fuzzify_x_list_t(old_centers, new_partitions)

print(old_partitions)
print(up_partitions)
print(new_partitions)

print(f0)
print(f)

# print(old_partitions)
# print(up_partitions)
#
#
# print(old_centers)
# print(up_centers)
# print(new_centers)
# print(new_partitions)
#
x = np.arange(-5, 10, 0.01)
for i in range(len(new_partitions)):
    y = [pf.t_pertinence(xi, new_partitions[i]) for xi in x]
    plt.plot(x, y)

plt.show()
#
# print(f)
