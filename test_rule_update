from FTS import FTS
import rule_base_management as rbm
import partition_utilities as pu
import pertinence_funcs as pf
from pertinence_funcs import fuzzify_x_list_t
import numpy as np
import matplotlib.pyplot as plt
from forecast_funcs import forecast_weighted_average_t_sets

old_partitions = pu.generate_t_partitions(3, 0, 8)
old_centers = [p[1] for p in old_partitions]

# 1) Compute the new partitions
new_partitions = pu.generate_t_partitions(3, 1, 4)


# 2) Verify the pertinence of the old sets centers with respect to the new partitions
f = fuzzify_x_list_t(old_centers, new_partitions)

# 3) Compute the final set of partitions
up_partitions = new_partitions + [old_partitions[i] for i in range(len(f)) if f[i] < 0]
up_partitions = sorted(up_partitions, key=lambda n_p: n_p[1])

# 4) Compute the mappings required to update the rule base
f = fuzzify_x_list_t(old_centers, up_partitions)
map_old_new = [[i, f[i]] for i in range(len(f)) if i != f[i]]

print(map_old_new)

x = np.arange(-5, 10, 0.01)
for i in range(len(up_partitions)):
    y = [pf.t_pertinence(xi, up_partitions[i]) for xi in x]
    plt.plot(x, y)

plt.show()
